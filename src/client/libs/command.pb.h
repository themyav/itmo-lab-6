// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: command.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_command_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_command_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_command_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_command_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_command_2eproto;
namespace serialization {
class Command;
struct CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class Dragon;
struct DragonDefaultTypeInternal;
extern DragonDefaultTypeInternal _Dragon_default_instance_;
class DragonCollection;
struct DragonCollectionDefaultTypeInternal;
extern DragonCollectionDefaultTypeInternal _DragonCollection_default_instance_;
class Response;
struct ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
}  // namespace serialization
PROTOBUF_NAMESPACE_OPEN
template<> ::serialization::Command* Arena::CreateMaybeMessage<::serialization::Command>(Arena*);
template<> ::serialization::Dragon* Arena::CreateMaybeMessage<::serialization::Dragon>(Arena*);
template<> ::serialization::DragonCollection* Arena::CreateMaybeMessage<::serialization::DragonCollection>(Arena*);
template<> ::serialization::Response* Arena::CreateMaybeMessage<::serialization::Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace serialization {

enum Dragon_Color : int {
  Dragon_Color_RED = 1,
  Dragon_Color_BLACK = 2,
  Dragon_Color_BLUE = 3,
  Dragon_Color_WHITE = 4
};
bool Dragon_Color_IsValid(int value);
constexpr Dragon_Color Dragon_Color_Color_MIN = Dragon_Color_RED;
constexpr Dragon_Color Dragon_Color_Color_MAX = Dragon_Color_WHITE;
constexpr int Dragon_Color_Color_ARRAYSIZE = Dragon_Color_Color_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Dragon_Color_descriptor();
template<typename T>
inline const std::string& Dragon_Color_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Dragon_Color>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Dragon_Color_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Dragon_Color_descriptor(), enum_t_value);
}
inline bool Dragon_Color_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Dragon_Color* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Dragon_Color>(
    Dragon_Color_descriptor(), name, value);
}
enum Dragon_DragonType : int {
  Dragon_DragonType_WATER = 1,
  Dragon_DragonType_UNDERGROUND = 2,
  Dragon_DragonType_AIR = 3,
  Dragon_DragonType_FIRE = 4
};
bool Dragon_DragonType_IsValid(int value);
constexpr Dragon_DragonType Dragon_DragonType_DragonType_MIN = Dragon_DragonType_WATER;
constexpr Dragon_DragonType Dragon_DragonType_DragonType_MAX = Dragon_DragonType_FIRE;
constexpr int Dragon_DragonType_DragonType_ARRAYSIZE = Dragon_DragonType_DragonType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Dragon_DragonType_descriptor();
template<typename T>
inline const std::string& Dragon_DragonType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Dragon_DragonType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Dragon_DragonType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Dragon_DragonType_descriptor(), enum_t_value);
}
inline bool Dragon_DragonType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Dragon_DragonType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Dragon_DragonType>(
    Dragon_DragonType_descriptor(), name, value);
}
enum Dragon_DragonCharacter : int {
  Dragon_DragonCharacter_CUNNING = 1,
  Dragon_DragonCharacter_WISE = 2,
  Dragon_DragonCharacter_GOOD = 3,
  Dragon_DragonCharacter_CHAOTIC = 4
};
bool Dragon_DragonCharacter_IsValid(int value);
constexpr Dragon_DragonCharacter Dragon_DragonCharacter_DragonCharacter_MIN = Dragon_DragonCharacter_CUNNING;
constexpr Dragon_DragonCharacter Dragon_DragonCharacter_DragonCharacter_MAX = Dragon_DragonCharacter_CHAOTIC;
constexpr int Dragon_DragonCharacter_DragonCharacter_ARRAYSIZE = Dragon_DragonCharacter_DragonCharacter_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Dragon_DragonCharacter_descriptor();
template<typename T>
inline const std::string& Dragon_DragonCharacter_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Dragon_DragonCharacter>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Dragon_DragonCharacter_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Dragon_DragonCharacter_descriptor(), enum_t_value);
}
inline bool Dragon_DragonCharacter_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Dragon_DragonCharacter* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Dragon_DragonCharacter>(
    Dragon_DragonCharacter_descriptor(), name, value);
}
// ===================================================================

class Dragon final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialization.Dragon) */ {
 public:
  inline Dragon() : Dragon(nullptr) {}
  ~Dragon() override;
  explicit PROTOBUF_CONSTEXPR Dragon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Dragon(const Dragon& from);
  Dragon(Dragon&& from) noexcept
    : Dragon() {
    *this = ::std::move(from);
  }

  inline Dragon& operator=(const Dragon& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dragon& operator=(Dragon&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Dragon& default_instance() {
    return *internal_default_instance();
  }
  static inline const Dragon* internal_default_instance() {
    return reinterpret_cast<const Dragon*>(
               &_Dragon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Dragon& a, Dragon& b) {
    a.Swap(&b);
  }
  inline void Swap(Dragon* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Dragon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Dragon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Dragon>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Dragon& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Dragon& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dragon* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialization.Dragon";
  }
  protected:
  explicit Dragon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Dragon_Color Color;
  static constexpr Color RED =
    Dragon_Color_RED;
  static constexpr Color BLACK =
    Dragon_Color_BLACK;
  static constexpr Color BLUE =
    Dragon_Color_BLUE;
  static constexpr Color WHITE =
    Dragon_Color_WHITE;
  static inline bool Color_IsValid(int value) {
    return Dragon_Color_IsValid(value);
  }
  static constexpr Color Color_MIN =
    Dragon_Color_Color_MIN;
  static constexpr Color Color_MAX =
    Dragon_Color_Color_MAX;
  static constexpr int Color_ARRAYSIZE =
    Dragon_Color_Color_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Color_descriptor() {
    return Dragon_Color_descriptor();
  }
  template<typename T>
  static inline const std::string& Color_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Color>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Color_Name.");
    return Dragon_Color_Name(enum_t_value);
  }
  static inline bool Color_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Color* value) {
    return Dragon_Color_Parse(name, value);
  }

  typedef Dragon_DragonType DragonType;
  static constexpr DragonType WATER =
    Dragon_DragonType_WATER;
  static constexpr DragonType UNDERGROUND =
    Dragon_DragonType_UNDERGROUND;
  static constexpr DragonType AIR =
    Dragon_DragonType_AIR;
  static constexpr DragonType FIRE =
    Dragon_DragonType_FIRE;
  static inline bool DragonType_IsValid(int value) {
    return Dragon_DragonType_IsValid(value);
  }
  static constexpr DragonType DragonType_MIN =
    Dragon_DragonType_DragonType_MIN;
  static constexpr DragonType DragonType_MAX =
    Dragon_DragonType_DragonType_MAX;
  static constexpr int DragonType_ARRAYSIZE =
    Dragon_DragonType_DragonType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DragonType_descriptor() {
    return Dragon_DragonType_descriptor();
  }
  template<typename T>
  static inline const std::string& DragonType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DragonType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DragonType_Name.");
    return Dragon_DragonType_Name(enum_t_value);
  }
  static inline bool DragonType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DragonType* value) {
    return Dragon_DragonType_Parse(name, value);
  }

  typedef Dragon_DragonCharacter DragonCharacter;
  static constexpr DragonCharacter CUNNING =
    Dragon_DragonCharacter_CUNNING;
  static constexpr DragonCharacter WISE =
    Dragon_DragonCharacter_WISE;
  static constexpr DragonCharacter GOOD =
    Dragon_DragonCharacter_GOOD;
  static constexpr DragonCharacter CHAOTIC =
    Dragon_DragonCharacter_CHAOTIC;
  static inline bool DragonCharacter_IsValid(int value) {
    return Dragon_DragonCharacter_IsValid(value);
  }
  static constexpr DragonCharacter DragonCharacter_MIN =
    Dragon_DragonCharacter_DragonCharacter_MIN;
  static constexpr DragonCharacter DragonCharacter_MAX =
    Dragon_DragonCharacter_DragonCharacter_MAX;
  static constexpr int DragonCharacter_ARRAYSIZE =
    Dragon_DragonCharacter_DragonCharacter_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DragonCharacter_descriptor() {
    return Dragon_DragonCharacter_descriptor();
  }
  template<typename T>
  static inline const std::string& DragonCharacter_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DragonCharacter>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DragonCharacter_Name.");
    return Dragon_DragonCharacter_Name(enum_t_value);
  }
  static inline bool DragonCharacter_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DragonCharacter* value) {
    return Dragon_DragonCharacter_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kXFieldNumber = 3,
    kCreationDateFieldNumber = 8,
    kYFieldNumber = 11,
    kKillerNameFieldNumber = 12,
    kKillerBirthdayFieldNumber = 13,
    kKillerHeightFieldNumber = 14,
    kKillerWeightFieldNumber = 15,
    kKillerPassportIdFieldNumber = 16,
    kComnameFieldNumber = 17,
    kArgumentsFieldNumber = 18,
    kIdFieldNumber = 1,
    kAgeFieldNumber = 4,
    kCharacterFieldNumber = 7,
    kColorFieldNumber = 5,
    kTypeFieldNumber = 6,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string x = 3;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  const std::string& x() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_x(ArgT0&& arg0, ArgT... args);
  std::string* mutable_x();
  PROTOBUF_NODISCARD std::string* release_x();
  void set_allocated_x(std::string* x);
  private:
  const std::string& _internal_x() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_x(const std::string& value);
  std::string* _internal_mutable_x();
  public:

  // optional string creation_date = 8;
  bool has_creation_date() const;
  private:
  bool _internal_has_creation_date() const;
  public:
  void clear_creation_date();
  const std::string& creation_date() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_creation_date(ArgT0&& arg0, ArgT... args);
  std::string* mutable_creation_date();
  PROTOBUF_NODISCARD std::string* release_creation_date();
  void set_allocated_creation_date(std::string* creation_date);
  private:
  const std::string& _internal_creation_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creation_date(const std::string& value);
  std::string* _internal_mutable_creation_date();
  public:

  // optional string y = 11;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  const std::string& y() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_y(ArgT0&& arg0, ArgT... args);
  std::string* mutable_y();
  PROTOBUF_NODISCARD std::string* release_y();
  void set_allocated_y(std::string* y);
  private:
  const std::string& _internal_y() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_y(const std::string& value);
  std::string* _internal_mutable_y();
  public:

  // optional string killer_name = 12;
  bool has_killer_name() const;
  private:
  bool _internal_has_killer_name() const;
  public:
  void clear_killer_name();
  const std::string& killer_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_killer_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_killer_name();
  PROTOBUF_NODISCARD std::string* release_killer_name();
  void set_allocated_killer_name(std::string* killer_name);
  private:
  const std::string& _internal_killer_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_killer_name(const std::string& value);
  std::string* _internal_mutable_killer_name();
  public:

  // optional string killer_birthday = 13;
  bool has_killer_birthday() const;
  private:
  bool _internal_has_killer_birthday() const;
  public:
  void clear_killer_birthday();
  const std::string& killer_birthday() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_killer_birthday(ArgT0&& arg0, ArgT... args);
  std::string* mutable_killer_birthday();
  PROTOBUF_NODISCARD std::string* release_killer_birthday();
  void set_allocated_killer_birthday(std::string* killer_birthday);
  private:
  const std::string& _internal_killer_birthday() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_killer_birthday(const std::string& value);
  std::string* _internal_mutable_killer_birthday();
  public:

  // optional string killer_height = 14;
  bool has_killer_height() const;
  private:
  bool _internal_has_killer_height() const;
  public:
  void clear_killer_height();
  const std::string& killer_height() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_killer_height(ArgT0&& arg0, ArgT... args);
  std::string* mutable_killer_height();
  PROTOBUF_NODISCARD std::string* release_killer_height();
  void set_allocated_killer_height(std::string* killer_height);
  private:
  const std::string& _internal_killer_height() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_killer_height(const std::string& value);
  std::string* _internal_mutable_killer_height();
  public:

  // optional string killer_weight = 15;
  bool has_killer_weight() const;
  private:
  bool _internal_has_killer_weight() const;
  public:
  void clear_killer_weight();
  const std::string& killer_weight() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_killer_weight(ArgT0&& arg0, ArgT... args);
  std::string* mutable_killer_weight();
  PROTOBUF_NODISCARD std::string* release_killer_weight();
  void set_allocated_killer_weight(std::string* killer_weight);
  private:
  const std::string& _internal_killer_weight() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_killer_weight(const std::string& value);
  std::string* _internal_mutable_killer_weight();
  public:

  // optional string killer_passport_id = 16;
  bool has_killer_passport_id() const;
  private:
  bool _internal_has_killer_passport_id() const;
  public:
  void clear_killer_passport_id();
  const std::string& killer_passport_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_killer_passport_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_killer_passport_id();
  PROTOBUF_NODISCARD std::string* release_killer_passport_id();
  void set_allocated_killer_passport_id(std::string* killer_passport_id);
  private:
  const std::string& _internal_killer_passport_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_killer_passport_id(const std::string& value);
  std::string* _internal_mutable_killer_passport_id();
  public:

  // optional string comname = 17;
  bool has_comname() const;
  private:
  bool _internal_has_comname() const;
  public:
  void clear_comname();
  const std::string& comname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_comname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_comname();
  PROTOBUF_NODISCARD std::string* release_comname();
  void set_allocated_comname(std::string* comname);
  private:
  const std::string& _internal_comname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_comname(const std::string& value);
  std::string* _internal_mutable_comname();
  public:

  // optional string arguments = 18;
  bool has_arguments() const;
  private:
  bool _internal_has_arguments() const;
  public:
  void clear_arguments();
  const std::string& arguments() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_arguments(ArgT0&& arg0, ArgT... args);
  std::string* mutable_arguments();
  PROTOBUF_NODISCARD std::string* release_arguments();
  void set_allocated_arguments(std::string* arguments);
  private:
  const std::string& _internal_arguments() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_arguments(const std::string& value);
  std::string* _internal_mutable_arguments();
  public:

  // optional int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // optional int32 age = 4;
  bool has_age() const;
  private:
  bool _internal_has_age() const;
  public:
  void clear_age();
  int32_t age() const;
  void set_age(int32_t value);
  private:
  int32_t _internal_age() const;
  void _internal_set_age(int32_t value);
  public:

  // optional .serialization.Dragon.DragonCharacter character = 7;
  bool has_character() const;
  private:
  bool _internal_has_character() const;
  public:
  void clear_character();
  ::serialization::Dragon_DragonCharacter character() const;
  void set_character(::serialization::Dragon_DragonCharacter value);
  private:
  ::serialization::Dragon_DragonCharacter _internal_character() const;
  void _internal_set_character(::serialization::Dragon_DragonCharacter value);
  public:

  // optional .serialization.Dragon.Color color = 5;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  ::serialization::Dragon_Color color() const;
  void set_color(::serialization::Dragon_Color value);
  private:
  ::serialization::Dragon_Color _internal_color() const;
  void _internal_set_color(::serialization::Dragon_Color value);
  public:

  // optional .serialization.Dragon.DragonType type = 6;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::serialization::Dragon_DragonType type() const;
  void set_type(::serialization::Dragon_DragonType value);
  private:
  ::serialization::Dragon_DragonType _internal_type() const;
  void _internal_set_type(::serialization::Dragon_DragonType value);
  public:

  // @@protoc_insertion_point(class_scope:serialization.Dragon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr x_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creation_date_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr y_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr killer_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr killer_birthday_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr killer_height_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr killer_weight_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr killer_passport_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr arguments_;
    int32_t id_;
    int32_t age_;
    int character_;
    int color_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_command_2eproto;
};
// -------------------------------------------------------------------

class DragonCollection final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialization.DragonCollection) */ {
 public:
  inline DragonCollection() : DragonCollection(nullptr) {}
  ~DragonCollection() override;
  explicit PROTOBUF_CONSTEXPR DragonCollection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DragonCollection(const DragonCollection& from);
  DragonCollection(DragonCollection&& from) noexcept
    : DragonCollection() {
    *this = ::std::move(from);
  }

  inline DragonCollection& operator=(const DragonCollection& from) {
    CopyFrom(from);
    return *this;
  }
  inline DragonCollection& operator=(DragonCollection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DragonCollection& default_instance() {
    return *internal_default_instance();
  }
  static inline const DragonCollection* internal_default_instance() {
    return reinterpret_cast<const DragonCollection*>(
               &_DragonCollection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DragonCollection& a, DragonCollection& b) {
    a.Swap(&b);
  }
  inline void Swap(DragonCollection* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DragonCollection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DragonCollection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DragonCollection>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DragonCollection& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DragonCollection& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DragonCollection* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialization.DragonCollection";
  }
  protected:
  explicit DragonCollection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDragonsFieldNumber = 1,
  };
  // repeated .serialization.Dragon dragons = 1;
  int dragons_size() const;
  private:
  int _internal_dragons_size() const;
  public:
  void clear_dragons();
  ::serialization::Dragon* mutable_dragons(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::Dragon >*
      mutable_dragons();
  private:
  const ::serialization::Dragon& _internal_dragons(int index) const;
  ::serialization::Dragon* _internal_add_dragons();
  public:
  const ::serialization::Dragon& dragons(int index) const;
  ::serialization::Dragon* add_dragons();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::Dragon >&
      dragons() const;

  // @@protoc_insertion_point(class_scope:serialization.DragonCollection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::Dragon > dragons_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_command_2eproto;
};
// -------------------------------------------------------------------

class Command final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialization.Command) */ {
 public:
  inline Command() : Command(nullptr) {}
  ~Command() override;
  explicit PROTOBUF_CONSTEXPR Command(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command(const Command& from);
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command& operator=(Command&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }
  inline void Swap(Command* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Command& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialization.Command";
  }
  protected:
  explicit Command(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kArgumentsFieldNumber = 2,
    kDragonFieldNumber = 3,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string arguments = 2;
  bool has_arguments() const;
  private:
  bool _internal_has_arguments() const;
  public:
  void clear_arguments();
  const std::string& arguments() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_arguments(ArgT0&& arg0, ArgT... args);
  std::string* mutable_arguments();
  PROTOBUF_NODISCARD std::string* release_arguments();
  void set_allocated_arguments(std::string* arguments);
  private:
  const std::string& _internal_arguments() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_arguments(const std::string& value);
  std::string* _internal_mutable_arguments();
  public:

  // optional .serialization.Dragon dragon = 3;
  bool has_dragon() const;
  private:
  bool _internal_has_dragon() const;
  public:
  void clear_dragon();
  const ::serialization::Dragon& dragon() const;
  PROTOBUF_NODISCARD ::serialization::Dragon* release_dragon();
  ::serialization::Dragon* mutable_dragon();
  void set_allocated_dragon(::serialization::Dragon* dragon);
  private:
  const ::serialization::Dragon& _internal_dragon() const;
  ::serialization::Dragon* _internal_mutable_dragon();
  public:
  void unsafe_arena_set_allocated_dragon(
      ::serialization::Dragon* dragon);
  ::serialization::Dragon* unsafe_arena_release_dragon();

  // @@protoc_insertion_point(class_scope:serialization.Command)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr arguments_;
    ::serialization::Dragon* dragon_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_command_2eproto;
};
// -------------------------------------------------------------------

class Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialization.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  ~Response() override;
  explicit PROTOBUF_CONSTEXPR Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialization.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 1,
    kCollectionFieldNumber = 2,
  };
  // optional string response = 1;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const std::string& response() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_response(ArgT0&& arg0, ArgT... args);
  std::string* mutable_response();
  PROTOBUF_NODISCARD std::string* release_response();
  void set_allocated_response(std::string* response);
  private:
  const std::string& _internal_response() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_response(const std::string& value);
  std::string* _internal_mutable_response();
  public:

  // optional .serialization.DragonCollection collection = 2;
  bool has_collection() const;
  private:
  bool _internal_has_collection() const;
  public:
  void clear_collection();
  const ::serialization::DragonCollection& collection() const;
  PROTOBUF_NODISCARD ::serialization::DragonCollection* release_collection();
  ::serialization::DragonCollection* mutable_collection();
  void set_allocated_collection(::serialization::DragonCollection* collection);
  private:
  const ::serialization::DragonCollection& _internal_collection() const;
  ::serialization::DragonCollection* _internal_mutable_collection();
  public:
  void unsafe_arena_set_allocated_collection(
      ::serialization::DragonCollection* collection);
  ::serialization::DragonCollection* unsafe_arena_release_collection();

  // @@protoc_insertion_point(class_scope:serialization.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_;
    ::serialization::DragonCollection* collection_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_command_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Dragon

// optional int32 id = 1;
inline bool Dragon::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Dragon::has_id() const {
  return _internal_has_id();
}
inline void Dragon::clear_id() {
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline int32_t Dragon::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Dragon::id() const {
  // @@protoc_insertion_point(field_get:serialization.Dragon.id)
  return _internal_id();
}
inline void Dragon::_internal_set_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.id_ = value;
}
inline void Dragon::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:serialization.Dragon.id)
}

// optional string name = 2;
inline bool Dragon::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Dragon::has_name() const {
  return _internal_has_name();
}
inline void Dragon::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Dragon::name() const {
  // @@protoc_insertion_point(field_get:serialization.Dragon.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Dragon::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:serialization.Dragon.name)
}
inline std::string* Dragon::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:serialization.Dragon.name)
  return _s;
}
inline const std::string& Dragon::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Dragon::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Dragon::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Dragon::release_name() {
  // @@protoc_insertion_point(field_release:serialization.Dragon.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Dragon::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:serialization.Dragon.name)
}

// optional string x = 3;
inline bool Dragon::_internal_has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Dragon::has_x() const {
  return _internal_has_x();
}
inline void Dragon::clear_x() {
  _impl_.x_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Dragon::x() const {
  // @@protoc_insertion_point(field_get:serialization.Dragon.x)
  return _internal_x();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Dragon::set_x(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.x_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:serialization.Dragon.x)
}
inline std::string* Dragon::mutable_x() {
  std::string* _s = _internal_mutable_x();
  // @@protoc_insertion_point(field_mutable:serialization.Dragon.x)
  return _s;
}
inline const std::string& Dragon::_internal_x() const {
  return _impl_.x_.Get();
}
inline void Dragon::_internal_set_x(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.x_.Set(value, GetArenaForAllocation());
}
inline std::string* Dragon::_internal_mutable_x() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.x_.Mutable(GetArenaForAllocation());
}
inline std::string* Dragon::release_x() {
  // @@protoc_insertion_point(field_release:serialization.Dragon.x)
  if (!_internal_has_x()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.x_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.x_.IsDefault()) {
    _impl_.x_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Dragon::set_allocated_x(std::string* x) {
  if (x != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.x_.SetAllocated(x, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.x_.IsDefault()) {
    _impl_.x_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:serialization.Dragon.x)
}

// optional int32 age = 4;
inline bool Dragon::_internal_has_age() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Dragon::has_age() const {
  return _internal_has_age();
}
inline void Dragon::clear_age() {
  _impl_.age_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline int32_t Dragon::_internal_age() const {
  return _impl_.age_;
}
inline int32_t Dragon::age() const {
  // @@protoc_insertion_point(field_get:serialization.Dragon.age)
  return _internal_age();
}
inline void Dragon::_internal_set_age(int32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.age_ = value;
}
inline void Dragon::set_age(int32_t value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:serialization.Dragon.age)
}

// optional .serialization.Dragon.Color color = 5;
inline bool Dragon::_internal_has_color() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool Dragon::has_color() const {
  return _internal_has_color();
}
inline void Dragon::clear_color() {
  _impl_.color_ = 1;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline ::serialization::Dragon_Color Dragon::_internal_color() const {
  return static_cast< ::serialization::Dragon_Color >(_impl_.color_);
}
inline ::serialization::Dragon_Color Dragon::color() const {
  // @@protoc_insertion_point(field_get:serialization.Dragon.color)
  return _internal_color();
}
inline void Dragon::_internal_set_color(::serialization::Dragon_Color value) {
  assert(::serialization::Dragon_Color_IsValid(value));
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.color_ = value;
}
inline void Dragon::set_color(::serialization::Dragon_Color value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:serialization.Dragon.color)
}

// optional .serialization.Dragon.DragonType type = 6;
inline bool Dragon::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool Dragon::has_type() const {
  return _internal_has_type();
}
inline void Dragon::clear_type() {
  _impl_.type_ = 1;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline ::serialization::Dragon_DragonType Dragon::_internal_type() const {
  return static_cast< ::serialization::Dragon_DragonType >(_impl_.type_);
}
inline ::serialization::Dragon_DragonType Dragon::type() const {
  // @@protoc_insertion_point(field_get:serialization.Dragon.type)
  return _internal_type();
}
inline void Dragon::_internal_set_type(::serialization::Dragon_DragonType value) {
  assert(::serialization::Dragon_DragonType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.type_ = value;
}
inline void Dragon::set_type(::serialization::Dragon_DragonType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:serialization.Dragon.type)
}

// optional .serialization.Dragon.DragonCharacter character = 7;
inline bool Dragon::_internal_has_character() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool Dragon::has_character() const {
  return _internal_has_character();
}
inline void Dragon::clear_character() {
  _impl_.character_ = 1;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::serialization::Dragon_DragonCharacter Dragon::_internal_character() const {
  return static_cast< ::serialization::Dragon_DragonCharacter >(_impl_.character_);
}
inline ::serialization::Dragon_DragonCharacter Dragon::character() const {
  // @@protoc_insertion_point(field_get:serialization.Dragon.character)
  return _internal_character();
}
inline void Dragon::_internal_set_character(::serialization::Dragon_DragonCharacter value) {
  assert(::serialization::Dragon_DragonCharacter_IsValid(value));
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.character_ = value;
}
inline void Dragon::set_character(::serialization::Dragon_DragonCharacter value) {
  _internal_set_character(value);
  // @@protoc_insertion_point(field_set:serialization.Dragon.character)
}

// optional string creation_date = 8;
inline bool Dragon::_internal_has_creation_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Dragon::has_creation_date() const {
  return _internal_has_creation_date();
}
inline void Dragon::clear_creation_date() {
  _impl_.creation_date_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Dragon::creation_date() const {
  // @@protoc_insertion_point(field_get:serialization.Dragon.creation_date)
  return _internal_creation_date();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Dragon::set_creation_date(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.creation_date_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:serialization.Dragon.creation_date)
}
inline std::string* Dragon::mutable_creation_date() {
  std::string* _s = _internal_mutable_creation_date();
  // @@protoc_insertion_point(field_mutable:serialization.Dragon.creation_date)
  return _s;
}
inline const std::string& Dragon::_internal_creation_date() const {
  return _impl_.creation_date_.Get();
}
inline void Dragon::_internal_set_creation_date(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.creation_date_.Set(value, GetArenaForAllocation());
}
inline std::string* Dragon::_internal_mutable_creation_date() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.creation_date_.Mutable(GetArenaForAllocation());
}
inline std::string* Dragon::release_creation_date() {
  // @@protoc_insertion_point(field_release:serialization.Dragon.creation_date)
  if (!_internal_has_creation_date()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.creation_date_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.creation_date_.IsDefault()) {
    _impl_.creation_date_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Dragon::set_allocated_creation_date(std::string* creation_date) {
  if (creation_date != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.creation_date_.SetAllocated(creation_date, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.creation_date_.IsDefault()) {
    _impl_.creation_date_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:serialization.Dragon.creation_date)
}

// optional string y = 11;
inline bool Dragon::_internal_has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Dragon::has_y() const {
  return _internal_has_y();
}
inline void Dragon::clear_y() {
  _impl_.y_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Dragon::y() const {
  // @@protoc_insertion_point(field_get:serialization.Dragon.y)
  return _internal_y();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Dragon::set_y(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.y_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:serialization.Dragon.y)
}
inline std::string* Dragon::mutable_y() {
  std::string* _s = _internal_mutable_y();
  // @@protoc_insertion_point(field_mutable:serialization.Dragon.y)
  return _s;
}
inline const std::string& Dragon::_internal_y() const {
  return _impl_.y_.Get();
}
inline void Dragon::_internal_set_y(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.y_.Set(value, GetArenaForAllocation());
}
inline std::string* Dragon::_internal_mutable_y() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.y_.Mutable(GetArenaForAllocation());
}
inline std::string* Dragon::release_y() {
  // @@protoc_insertion_point(field_release:serialization.Dragon.y)
  if (!_internal_has_y()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.y_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.y_.IsDefault()) {
    _impl_.y_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Dragon::set_allocated_y(std::string* y) {
  if (y != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.y_.SetAllocated(y, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.y_.IsDefault()) {
    _impl_.y_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:serialization.Dragon.y)
}

// optional string killer_name = 12;
inline bool Dragon::_internal_has_killer_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Dragon::has_killer_name() const {
  return _internal_has_killer_name();
}
inline void Dragon::clear_killer_name() {
  _impl_.killer_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Dragon::killer_name() const {
  // @@protoc_insertion_point(field_get:serialization.Dragon.killer_name)
  return _internal_killer_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Dragon::set_killer_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.killer_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:serialization.Dragon.killer_name)
}
inline std::string* Dragon::mutable_killer_name() {
  std::string* _s = _internal_mutable_killer_name();
  // @@protoc_insertion_point(field_mutable:serialization.Dragon.killer_name)
  return _s;
}
inline const std::string& Dragon::_internal_killer_name() const {
  return _impl_.killer_name_.Get();
}
inline void Dragon::_internal_set_killer_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.killer_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Dragon::_internal_mutable_killer_name() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.killer_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Dragon::release_killer_name() {
  // @@protoc_insertion_point(field_release:serialization.Dragon.killer_name)
  if (!_internal_has_killer_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.killer_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.killer_name_.IsDefault()) {
    _impl_.killer_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Dragon::set_allocated_killer_name(std::string* killer_name) {
  if (killer_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.killer_name_.SetAllocated(killer_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.killer_name_.IsDefault()) {
    _impl_.killer_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:serialization.Dragon.killer_name)
}

// optional string killer_birthday = 13;
inline bool Dragon::_internal_has_killer_birthday() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Dragon::has_killer_birthday() const {
  return _internal_has_killer_birthday();
}
inline void Dragon::clear_killer_birthday() {
  _impl_.killer_birthday_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& Dragon::killer_birthday() const {
  // @@protoc_insertion_point(field_get:serialization.Dragon.killer_birthday)
  return _internal_killer_birthday();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Dragon::set_killer_birthday(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000020u;
 _impl_.killer_birthday_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:serialization.Dragon.killer_birthday)
}
inline std::string* Dragon::mutable_killer_birthday() {
  std::string* _s = _internal_mutable_killer_birthday();
  // @@protoc_insertion_point(field_mutable:serialization.Dragon.killer_birthday)
  return _s;
}
inline const std::string& Dragon::_internal_killer_birthday() const {
  return _impl_.killer_birthday_.Get();
}
inline void Dragon::_internal_set_killer_birthday(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.killer_birthday_.Set(value, GetArenaForAllocation());
}
inline std::string* Dragon::_internal_mutable_killer_birthday() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.killer_birthday_.Mutable(GetArenaForAllocation());
}
inline std::string* Dragon::release_killer_birthday() {
  // @@protoc_insertion_point(field_release:serialization.Dragon.killer_birthday)
  if (!_internal_has_killer_birthday()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* p = _impl_.killer_birthday_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.killer_birthday_.IsDefault()) {
    _impl_.killer_birthday_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Dragon::set_allocated_killer_birthday(std::string* killer_birthday) {
  if (killer_birthday != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.killer_birthday_.SetAllocated(killer_birthday, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.killer_birthday_.IsDefault()) {
    _impl_.killer_birthday_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:serialization.Dragon.killer_birthday)
}

// optional string killer_height = 14;
inline bool Dragon::_internal_has_killer_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Dragon::has_killer_height() const {
  return _internal_has_killer_height();
}
inline void Dragon::clear_killer_height() {
  _impl_.killer_height_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& Dragon::killer_height() const {
  // @@protoc_insertion_point(field_get:serialization.Dragon.killer_height)
  return _internal_killer_height();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Dragon::set_killer_height(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000040u;
 _impl_.killer_height_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:serialization.Dragon.killer_height)
}
inline std::string* Dragon::mutable_killer_height() {
  std::string* _s = _internal_mutable_killer_height();
  // @@protoc_insertion_point(field_mutable:serialization.Dragon.killer_height)
  return _s;
}
inline const std::string& Dragon::_internal_killer_height() const {
  return _impl_.killer_height_.Get();
}
inline void Dragon::_internal_set_killer_height(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.killer_height_.Set(value, GetArenaForAllocation());
}
inline std::string* Dragon::_internal_mutable_killer_height() {
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.killer_height_.Mutable(GetArenaForAllocation());
}
inline std::string* Dragon::release_killer_height() {
  // @@protoc_insertion_point(field_release:serialization.Dragon.killer_height)
  if (!_internal_has_killer_height()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* p = _impl_.killer_height_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.killer_height_.IsDefault()) {
    _impl_.killer_height_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Dragon::set_allocated_killer_height(std::string* killer_height) {
  if (killer_height != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.killer_height_.SetAllocated(killer_height, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.killer_height_.IsDefault()) {
    _impl_.killer_height_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:serialization.Dragon.killer_height)
}

// optional string killer_weight = 15;
inline bool Dragon::_internal_has_killer_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Dragon::has_killer_weight() const {
  return _internal_has_killer_weight();
}
inline void Dragon::clear_killer_weight() {
  _impl_.killer_weight_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const std::string& Dragon::killer_weight() const {
  // @@protoc_insertion_point(field_get:serialization.Dragon.killer_weight)
  return _internal_killer_weight();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Dragon::set_killer_weight(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000080u;
 _impl_.killer_weight_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:serialization.Dragon.killer_weight)
}
inline std::string* Dragon::mutable_killer_weight() {
  std::string* _s = _internal_mutable_killer_weight();
  // @@protoc_insertion_point(field_mutable:serialization.Dragon.killer_weight)
  return _s;
}
inline const std::string& Dragon::_internal_killer_weight() const {
  return _impl_.killer_weight_.Get();
}
inline void Dragon::_internal_set_killer_weight(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.killer_weight_.Set(value, GetArenaForAllocation());
}
inline std::string* Dragon::_internal_mutable_killer_weight() {
  _impl_._has_bits_[0] |= 0x00000080u;
  return _impl_.killer_weight_.Mutable(GetArenaForAllocation());
}
inline std::string* Dragon::release_killer_weight() {
  // @@protoc_insertion_point(field_release:serialization.Dragon.killer_weight)
  if (!_internal_has_killer_weight()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000080u;
  auto* p = _impl_.killer_weight_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.killer_weight_.IsDefault()) {
    _impl_.killer_weight_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Dragon::set_allocated_killer_weight(std::string* killer_weight) {
  if (killer_weight != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.killer_weight_.SetAllocated(killer_weight, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.killer_weight_.IsDefault()) {
    _impl_.killer_weight_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:serialization.Dragon.killer_weight)
}

// optional string killer_passport_id = 16;
inline bool Dragon::_internal_has_killer_passport_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Dragon::has_killer_passport_id() const {
  return _internal_has_killer_passport_id();
}
inline void Dragon::clear_killer_passport_id() {
  _impl_.killer_passport_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const std::string& Dragon::killer_passport_id() const {
  // @@protoc_insertion_point(field_get:serialization.Dragon.killer_passport_id)
  return _internal_killer_passport_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Dragon::set_killer_passport_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000100u;
 _impl_.killer_passport_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:serialization.Dragon.killer_passport_id)
}
inline std::string* Dragon::mutable_killer_passport_id() {
  std::string* _s = _internal_mutable_killer_passport_id();
  // @@protoc_insertion_point(field_mutable:serialization.Dragon.killer_passport_id)
  return _s;
}
inline const std::string& Dragon::_internal_killer_passport_id() const {
  return _impl_.killer_passport_id_.Get();
}
inline void Dragon::_internal_set_killer_passport_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.killer_passport_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Dragon::_internal_mutable_killer_passport_id() {
  _impl_._has_bits_[0] |= 0x00000100u;
  return _impl_.killer_passport_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Dragon::release_killer_passport_id() {
  // @@protoc_insertion_point(field_release:serialization.Dragon.killer_passport_id)
  if (!_internal_has_killer_passport_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000100u;
  auto* p = _impl_.killer_passport_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.killer_passport_id_.IsDefault()) {
    _impl_.killer_passport_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Dragon::set_allocated_killer_passport_id(std::string* killer_passport_id) {
  if (killer_passport_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.killer_passport_id_.SetAllocated(killer_passport_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.killer_passport_id_.IsDefault()) {
    _impl_.killer_passport_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:serialization.Dragon.killer_passport_id)
}

// optional string comname = 17;
inline bool Dragon::_internal_has_comname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Dragon::has_comname() const {
  return _internal_has_comname();
}
inline void Dragon::clear_comname() {
  _impl_.comname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const std::string& Dragon::comname() const {
  // @@protoc_insertion_point(field_get:serialization.Dragon.comname)
  return _internal_comname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Dragon::set_comname(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000200u;
 _impl_.comname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:serialization.Dragon.comname)
}
inline std::string* Dragon::mutable_comname() {
  std::string* _s = _internal_mutable_comname();
  // @@protoc_insertion_point(field_mutable:serialization.Dragon.comname)
  return _s;
}
inline const std::string& Dragon::_internal_comname() const {
  return _impl_.comname_.Get();
}
inline void Dragon::_internal_set_comname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.comname_.Set(value, GetArenaForAllocation());
}
inline std::string* Dragon::_internal_mutable_comname() {
  _impl_._has_bits_[0] |= 0x00000200u;
  return _impl_.comname_.Mutable(GetArenaForAllocation());
}
inline std::string* Dragon::release_comname() {
  // @@protoc_insertion_point(field_release:serialization.Dragon.comname)
  if (!_internal_has_comname()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000200u;
  auto* p = _impl_.comname_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.comname_.IsDefault()) {
    _impl_.comname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Dragon::set_allocated_comname(std::string* comname) {
  if (comname != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.comname_.SetAllocated(comname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.comname_.IsDefault()) {
    _impl_.comname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:serialization.Dragon.comname)
}

// optional string arguments = 18;
inline bool Dragon::_internal_has_arguments() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Dragon::has_arguments() const {
  return _internal_has_arguments();
}
inline void Dragon::clear_arguments() {
  _impl_.arguments_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline const std::string& Dragon::arguments() const {
  // @@protoc_insertion_point(field_get:serialization.Dragon.arguments)
  return _internal_arguments();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Dragon::set_arguments(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000400u;
 _impl_.arguments_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:serialization.Dragon.arguments)
}
inline std::string* Dragon::mutable_arguments() {
  std::string* _s = _internal_mutable_arguments();
  // @@protoc_insertion_point(field_mutable:serialization.Dragon.arguments)
  return _s;
}
inline const std::string& Dragon::_internal_arguments() const {
  return _impl_.arguments_.Get();
}
inline void Dragon::_internal_set_arguments(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.arguments_.Set(value, GetArenaForAllocation());
}
inline std::string* Dragon::_internal_mutable_arguments() {
  _impl_._has_bits_[0] |= 0x00000400u;
  return _impl_.arguments_.Mutable(GetArenaForAllocation());
}
inline std::string* Dragon::release_arguments() {
  // @@protoc_insertion_point(field_release:serialization.Dragon.arguments)
  if (!_internal_has_arguments()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000400u;
  auto* p = _impl_.arguments_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.arguments_.IsDefault()) {
    _impl_.arguments_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Dragon::set_allocated_arguments(std::string* arguments) {
  if (arguments != nullptr) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.arguments_.SetAllocated(arguments, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.arguments_.IsDefault()) {
    _impl_.arguments_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:serialization.Dragon.arguments)
}

// -------------------------------------------------------------------

// DragonCollection

// repeated .serialization.Dragon dragons = 1;
inline int DragonCollection::_internal_dragons_size() const {
  return _impl_.dragons_.size();
}
inline int DragonCollection::dragons_size() const {
  return _internal_dragons_size();
}
inline void DragonCollection::clear_dragons() {
  _impl_.dragons_.Clear();
}
inline ::serialization::Dragon* DragonCollection::mutable_dragons(int index) {
  // @@protoc_insertion_point(field_mutable:serialization.DragonCollection.dragons)
  return _impl_.dragons_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::Dragon >*
DragonCollection::mutable_dragons() {
  // @@protoc_insertion_point(field_mutable_list:serialization.DragonCollection.dragons)
  return &_impl_.dragons_;
}
inline const ::serialization::Dragon& DragonCollection::_internal_dragons(int index) const {
  return _impl_.dragons_.Get(index);
}
inline const ::serialization::Dragon& DragonCollection::dragons(int index) const {
  // @@protoc_insertion_point(field_get:serialization.DragonCollection.dragons)
  return _internal_dragons(index);
}
inline ::serialization::Dragon* DragonCollection::_internal_add_dragons() {
  return _impl_.dragons_.Add();
}
inline ::serialization::Dragon* DragonCollection::add_dragons() {
  ::serialization::Dragon* _add = _internal_add_dragons();
  // @@protoc_insertion_point(field_add:serialization.DragonCollection.dragons)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::Dragon >&
DragonCollection::dragons() const {
  // @@protoc_insertion_point(field_list:serialization.DragonCollection.dragons)
  return _impl_.dragons_;
}

// -------------------------------------------------------------------

// Command

// optional string name = 1;
inline bool Command::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Command::has_name() const {
  return _internal_has_name();
}
inline void Command::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Command::name() const {
  // @@protoc_insertion_point(field_get:serialization.Command.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:serialization.Command.name)
}
inline std::string* Command::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:serialization.Command.name)
  return _s;
}
inline const std::string& Command::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Command::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Command::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Command::release_name() {
  // @@protoc_insertion_point(field_release:serialization.Command.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Command::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:serialization.Command.name)
}

// optional string arguments = 2;
inline bool Command::_internal_has_arguments() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Command::has_arguments() const {
  return _internal_has_arguments();
}
inline void Command::clear_arguments() {
  _impl_.arguments_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Command::arguments() const {
  // @@protoc_insertion_point(field_get:serialization.Command.arguments)
  return _internal_arguments();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command::set_arguments(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.arguments_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:serialization.Command.arguments)
}
inline std::string* Command::mutable_arguments() {
  std::string* _s = _internal_mutable_arguments();
  // @@protoc_insertion_point(field_mutable:serialization.Command.arguments)
  return _s;
}
inline const std::string& Command::_internal_arguments() const {
  return _impl_.arguments_.Get();
}
inline void Command::_internal_set_arguments(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.arguments_.Set(value, GetArenaForAllocation());
}
inline std::string* Command::_internal_mutable_arguments() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.arguments_.Mutable(GetArenaForAllocation());
}
inline std::string* Command::release_arguments() {
  // @@protoc_insertion_point(field_release:serialization.Command.arguments)
  if (!_internal_has_arguments()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.arguments_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.arguments_.IsDefault()) {
    _impl_.arguments_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Command::set_allocated_arguments(std::string* arguments) {
  if (arguments != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.arguments_.SetAllocated(arguments, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.arguments_.IsDefault()) {
    _impl_.arguments_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:serialization.Command.arguments)
}

// optional .serialization.Dragon dragon = 3;
inline bool Command::_internal_has_dragon() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dragon_ != nullptr);
  return value;
}
inline bool Command::has_dragon() const {
  return _internal_has_dragon();
}
inline void Command::clear_dragon() {
  if (_impl_.dragon_ != nullptr) _impl_.dragon_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::serialization::Dragon& Command::_internal_dragon() const {
  const ::serialization::Dragon* p = _impl_.dragon_;
  return p != nullptr ? *p : reinterpret_cast<const ::serialization::Dragon&>(
      ::serialization::_Dragon_default_instance_);
}
inline const ::serialization::Dragon& Command::dragon() const {
  // @@protoc_insertion_point(field_get:serialization.Command.dragon)
  return _internal_dragon();
}
inline void Command::unsafe_arena_set_allocated_dragon(
    ::serialization::Dragon* dragon) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dragon_);
  }
  _impl_.dragon_ = dragon;
  if (dragon) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:serialization.Command.dragon)
}
inline ::serialization::Dragon* Command::release_dragon() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::serialization::Dragon* temp = _impl_.dragon_;
  _impl_.dragon_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::serialization::Dragon* Command::unsafe_arena_release_dragon() {
  // @@protoc_insertion_point(field_release:serialization.Command.dragon)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::serialization::Dragon* temp = _impl_.dragon_;
  _impl_.dragon_ = nullptr;
  return temp;
}
inline ::serialization::Dragon* Command::_internal_mutable_dragon() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.dragon_ == nullptr) {
    auto* p = CreateMaybeMessage<::serialization::Dragon>(GetArenaForAllocation());
    _impl_.dragon_ = p;
  }
  return _impl_.dragon_;
}
inline ::serialization::Dragon* Command::mutable_dragon() {
  ::serialization::Dragon* _msg = _internal_mutable_dragon();
  // @@protoc_insertion_point(field_mutable:serialization.Command.dragon)
  return _msg;
}
inline void Command::set_allocated_dragon(::serialization::Dragon* dragon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.dragon_;
  }
  if (dragon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dragon);
    if (message_arena != submessage_arena) {
      dragon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dragon, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.dragon_ = dragon;
  // @@protoc_insertion_point(field_set_allocated:serialization.Command.dragon)
}

// -------------------------------------------------------------------

// Response

// optional string response = 1;
inline bool Response::_internal_has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Response::has_response() const {
  return _internal_has_response();
}
inline void Response::clear_response() {
  _impl_.response_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Response::response() const {
  // @@protoc_insertion_point(field_get:serialization.Response.response)
  return _internal_response();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Response::set_response(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.response_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:serialization.Response.response)
}
inline std::string* Response::mutable_response() {
  std::string* _s = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:serialization.Response.response)
  return _s;
}
inline const std::string& Response::_internal_response() const {
  return _impl_.response_.Get();
}
inline void Response::_internal_set_response(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.response_.Set(value, GetArenaForAllocation());
}
inline std::string* Response::_internal_mutable_response() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.response_.Mutable(GetArenaForAllocation());
}
inline std::string* Response::release_response() {
  // @@protoc_insertion_point(field_release:serialization.Response.response)
  if (!_internal_has_response()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.response_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.response_.IsDefault()) {
    _impl_.response_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Response::set_allocated_response(std::string* response) {
  if (response != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.response_.SetAllocated(response, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.response_.IsDefault()) {
    _impl_.response_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:serialization.Response.response)
}

// optional .serialization.DragonCollection collection = 2;
inline bool Response::_internal_has_collection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.collection_ != nullptr);
  return value;
}
inline bool Response::has_collection() const {
  return _internal_has_collection();
}
inline void Response::clear_collection() {
  if (_impl_.collection_ != nullptr) _impl_.collection_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::serialization::DragonCollection& Response::_internal_collection() const {
  const ::serialization::DragonCollection* p = _impl_.collection_;
  return p != nullptr ? *p : reinterpret_cast<const ::serialization::DragonCollection&>(
      ::serialization::_DragonCollection_default_instance_);
}
inline const ::serialization::DragonCollection& Response::collection() const {
  // @@protoc_insertion_point(field_get:serialization.Response.collection)
  return _internal_collection();
}
inline void Response::unsafe_arena_set_allocated_collection(
    ::serialization::DragonCollection* collection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.collection_);
  }
  _impl_.collection_ = collection;
  if (collection) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:serialization.Response.collection)
}
inline ::serialization::DragonCollection* Response::release_collection() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::serialization::DragonCollection* temp = _impl_.collection_;
  _impl_.collection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::serialization::DragonCollection* Response::unsafe_arena_release_collection() {
  // @@protoc_insertion_point(field_release:serialization.Response.collection)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::serialization::DragonCollection* temp = _impl_.collection_;
  _impl_.collection_ = nullptr;
  return temp;
}
inline ::serialization::DragonCollection* Response::_internal_mutable_collection() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.collection_ == nullptr) {
    auto* p = CreateMaybeMessage<::serialization::DragonCollection>(GetArenaForAllocation());
    _impl_.collection_ = p;
  }
  return _impl_.collection_;
}
inline ::serialization::DragonCollection* Response::mutable_collection() {
  ::serialization::DragonCollection* _msg = _internal_mutable_collection();
  // @@protoc_insertion_point(field_mutable:serialization.Response.collection)
  return _msg;
}
inline void Response::set_allocated_collection(::serialization::DragonCollection* collection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.collection_;
  }
  if (collection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(collection);
    if (message_arena != submessage_arena) {
      collection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, collection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.collection_ = collection;
  // @@protoc_insertion_point(field_set_allocated:serialization.Response.collection)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace serialization

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::serialization::Dragon_Color> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::serialization::Dragon_Color>() {
  return ::serialization::Dragon_Color_descriptor();
}
template <> struct is_proto_enum< ::serialization::Dragon_DragonType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::serialization::Dragon_DragonType>() {
  return ::serialization::Dragon_DragonType_descriptor();
}
template <> struct is_proto_enum< ::serialization::Dragon_DragonCharacter> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::serialization::Dragon_DragonCharacter>() {
  return ::serialization::Dragon_DragonCharacter_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_command_2eproto
