// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: command.proto

#include "../libs/command.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace serialization {
PROTOBUF_CONSTEXPR Dragon::Dragon(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.x_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.creation_date_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.y_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.killer_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.killer_birthday_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.killer_height_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.killer_weight_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.killer_passport_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.comname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.arguments_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.age_)*/0
  , /*decltype(_impl_.character_)*/1
  , /*decltype(_impl_.color_)*/1
  , /*decltype(_impl_.type_)*/1} {}
struct DragonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DragonDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DragonDefaultTypeInternal() {}
  union {
    Dragon _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DragonDefaultTypeInternal _Dragon_default_instance_;
PROTOBUF_CONSTEXPR DragonCollection::DragonCollection(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dragons_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DragonCollectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DragonCollectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DragonCollectionDefaultTypeInternal() {}
  union {
    DragonCollection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DragonCollectionDefaultTypeInternal _DragonCollection_default_instance_;
PROTOBUF_CONSTEXPR Command::Command(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.arguments_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dragon_)*/nullptr} {}
struct CommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandDefaultTypeInternal() {}
  union {
    Command _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandDefaultTypeInternal _Command_default_instance_;
PROTOBUF_CONSTEXPR Response::Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.response_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.collection_)*/nullptr} {}
struct ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseDefaultTypeInternal() {}
  union {
    Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseDefaultTypeInternal _Response_default_instance_;
}  // namespace serialization
static ::_pb::Metadata file_level_metadata_command_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_command_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_command_2eproto = nullptr;

const uint32_t TableStruct_command_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::serialization::Dragon, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::serialization::Dragon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::serialization::Dragon, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::serialization::Dragon, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::serialization::Dragon, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::serialization::Dragon, _impl_.age_),
  PROTOBUF_FIELD_OFFSET(::serialization::Dragon, _impl_.color_),
  PROTOBUF_FIELD_OFFSET(::serialization::Dragon, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::serialization::Dragon, _impl_.character_),
  PROTOBUF_FIELD_OFFSET(::serialization::Dragon, _impl_.creation_date_),
  PROTOBUF_FIELD_OFFSET(::serialization::Dragon, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::serialization::Dragon, _impl_.killer_name_),
  PROTOBUF_FIELD_OFFSET(::serialization::Dragon, _impl_.killer_birthday_),
  PROTOBUF_FIELD_OFFSET(::serialization::Dragon, _impl_.killer_height_),
  PROTOBUF_FIELD_OFFSET(::serialization::Dragon, _impl_.killer_weight_),
  PROTOBUF_FIELD_OFFSET(::serialization::Dragon, _impl_.killer_passport_id_),
  PROTOBUF_FIELD_OFFSET(::serialization::Dragon, _impl_.comname_),
  PROTOBUF_FIELD_OFFSET(::serialization::Dragon, _impl_.arguments_),
  11,
  0,
  1,
  12,
  14,
  15,
  13,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serialization::DragonCollection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::serialization::DragonCollection, _impl_.dragons_),
  PROTOBUF_FIELD_OFFSET(::serialization::Command, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::serialization::Command, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::serialization::Command, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::serialization::Command, _impl_.arguments_),
  PROTOBUF_FIELD_OFFSET(::serialization::Command, _impl_.dragon_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::serialization::Response, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::serialization::Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::serialization::Response, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::serialization::Response, _impl_.collection_),
  0,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 22, -1, sizeof(::serialization::Dragon)},
  { 38, -1, -1, sizeof(::serialization::DragonCollection)},
  { 45, 54, -1, sizeof(::serialization::Command)},
  { 57, 65, -1, sizeof(::serialization::Response)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::serialization::_Dragon_default_instance_._instance,
  &::serialization::_DragonCollection_default_instance_._instance,
  &::serialization::_Command_default_instance_._instance,
  &::serialization::_Response_default_instance_._instance,
};

const char descriptor_table_protodef_command_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rcommand.proto\022\rserialization\"\276\004\n\006Drago"
  "n\022\n\n\002id\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\t\n\001x\030\003 \001(\t\022\013"
  "\n\003age\030\004 \001(\005\022*\n\005color\030\005 \001(\0162\033.serializati"
  "on.Dragon.Color\022.\n\004type\030\006 \001(\0162 .serializ"
  "ation.Dragon.DragonType\0228\n\tcharacter\030\007 \001"
  "(\0162%.serialization.Dragon.DragonCharacte"
  "r\022\025\n\rcreation_date\030\010 \001(\t\022\t\n\001y\030\013 \001(\t\022\023\n\013k"
  "iller_name\030\014 \001(\t\022\027\n\017killer_birthday\030\r \001("
  "\t\022\025\n\rkiller_height\030\016 \001(\t\022\025\n\rkiller_weigh"
  "t\030\017 \001(\t\022\032\n\022killer_passport_id\030\020 \001(\t\022\017\n\007c"
  "omname\030\021 \001(\t\022\021\n\targuments\030\022 \001(\t\"0\n\005Color"
  "\022\007\n\003RED\020\001\022\t\n\005BLACK\020\002\022\010\n\004BLUE\020\003\022\t\n\005WHITE\020"
  "\004\";\n\nDragonType\022\t\n\005WATER\020\001\022\017\n\013UNDERGROUN"
  "D\020\002\022\007\n\003AIR\020\003\022\010\n\004FIRE\020\004\"\?\n\017DragonCharacte"
  "r\022\013\n\007CUNNING\020\001\022\010\n\004WISE\020\002\022\010\n\004GOOD\020\003\022\013\n\007CH"
  "AOTIC\020\004\":\n\020DragonCollection\022&\n\007dragons\030\001"
  " \003(\0132\025.serialization.Dragon\"Q\n\007Command\022\014"
  "\n\004name\030\001 \001(\t\022\021\n\targuments\030\002 \001(\t\022%\n\006drago"
  "n\030\003 \001(\0132\025.serialization.Dragon\"Q\n\010Respon"
  "se\022\020\n\010response\030\001 \001(\t\0223\n\ncollection\030\002 \001(\013"
  "2\037.serialization.DragonCollectionB-\n\026com"
  ".lab6.serializationB\023SerializationProtos"
  ;
static ::_pbi::once_flag descriptor_table_command_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_command_2eproto = {
    false, false, 880, descriptor_table_protodef_command_2eproto,
    "command.proto",
    &descriptor_table_command_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_command_2eproto::offsets,
    file_level_metadata_command_2eproto, file_level_enum_descriptors_command_2eproto,
    file_level_service_descriptors_command_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_command_2eproto_getter() {
  return &descriptor_table_command_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_command_2eproto(&descriptor_table_command_2eproto);
namespace serialization {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Dragon_Color_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_command_2eproto);
  return file_level_enum_descriptors_command_2eproto[0];
}
bool Dragon_Color_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Dragon_Color Dragon::RED;
constexpr Dragon_Color Dragon::BLACK;
constexpr Dragon_Color Dragon::BLUE;
constexpr Dragon_Color Dragon::WHITE;
constexpr Dragon_Color Dragon::Color_MIN;
constexpr Dragon_Color Dragon::Color_MAX;
constexpr int Dragon::Color_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Dragon_DragonType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_command_2eproto);
  return file_level_enum_descriptors_command_2eproto[1];
}
bool Dragon_DragonType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Dragon_DragonType Dragon::WATER;
constexpr Dragon_DragonType Dragon::UNDERGROUND;
constexpr Dragon_DragonType Dragon::AIR;
constexpr Dragon_DragonType Dragon::FIRE;
constexpr Dragon_DragonType Dragon::DragonType_MIN;
constexpr Dragon_DragonType Dragon::DragonType_MAX;
constexpr int Dragon::DragonType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Dragon_DragonCharacter_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_command_2eproto);
  return file_level_enum_descriptors_command_2eproto[2];
}
bool Dragon_DragonCharacter_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Dragon_DragonCharacter Dragon::CUNNING;
constexpr Dragon_DragonCharacter Dragon::WISE;
constexpr Dragon_DragonCharacter Dragon::GOOD;
constexpr Dragon_DragonCharacter Dragon::CHAOTIC;
constexpr Dragon_DragonCharacter Dragon::DragonCharacter_MIN;
constexpr Dragon_DragonCharacter Dragon::DragonCharacter_MAX;
constexpr int Dragon::DragonCharacter_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Dragon::_Internal {
 public:
  using HasBits = decltype(std::declval<Dragon>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_age(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_character(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_creation_date(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_killer_name(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_killer_birthday(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_killer_height(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_killer_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_killer_passport_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_comname(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_arguments(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

Dragon::Dragon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:serialization.Dragon)
}
Dragon::Dragon(const Dragon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.creation_date_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.killer_name_){}
    , decltype(_impl_.killer_birthday_){}
    , decltype(_impl_.killer_height_){}
    , decltype(_impl_.killer_weight_){}
    , decltype(_impl_.killer_passport_id_){}
    , decltype(_impl_.comname_){}
    , decltype(_impl_.arguments_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.age_){}
    , decltype(_impl_.character_){}
    , decltype(_impl_.color_){}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _impl_.name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  _impl_.x_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.x_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_x()) {
    _impl_.x_.Set(from._internal_x(), 
      GetArenaForAllocation());
  }
  _impl_.creation_date_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.creation_date_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_creation_date()) {
    _impl_.creation_date_.Set(from._internal_creation_date(), 
      GetArenaForAllocation());
  }
  _impl_.y_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.y_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_y()) {
    _impl_.y_.Set(from._internal_y(), 
      GetArenaForAllocation());
  }
  _impl_.killer_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.killer_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_killer_name()) {
    _impl_.killer_name_.Set(from._internal_killer_name(), 
      GetArenaForAllocation());
  }
  _impl_.killer_birthday_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.killer_birthday_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_killer_birthday()) {
    _impl_.killer_birthday_.Set(from._internal_killer_birthday(), 
      GetArenaForAllocation());
  }
  _impl_.killer_height_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.killer_height_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_killer_height()) {
    _impl_.killer_height_.Set(from._internal_killer_height(), 
      GetArenaForAllocation());
  }
  _impl_.killer_weight_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.killer_weight_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_killer_weight()) {
    _impl_.killer_weight_.Set(from._internal_killer_weight(), 
      GetArenaForAllocation());
  }
  _impl_.killer_passport_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.killer_passport_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_killer_passport_id()) {
    _impl_.killer_passport_id_.Set(from._internal_killer_passport_id(), 
      GetArenaForAllocation());
  }
  _impl_.comname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_comname()) {
    _impl_.comname_.Set(from._internal_comname(), 
      GetArenaForAllocation());
  }
  _impl_.arguments_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.arguments_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_arguments()) {
    _impl_.arguments_.Set(from._internal_arguments(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:serialization.Dragon)
}

inline void Dragon::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.creation_date_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.killer_name_){}
    , decltype(_impl_.killer_birthday_){}
    , decltype(_impl_.killer_height_){}
    , decltype(_impl_.killer_weight_){}
    , decltype(_impl_.killer_passport_id_){}
    , decltype(_impl_.comname_){}
    , decltype(_impl_.arguments_){}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.age_){0}
    , decltype(_impl_.character_){1}
    , decltype(_impl_.color_){1}
    , decltype(_impl_.type_){1}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.x_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.x_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.creation_date_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.creation_date_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.y_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.y_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.killer_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.killer_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.killer_birthday_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.killer_birthday_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.killer_height_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.killer_height_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.killer_weight_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.killer_weight_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.killer_passport_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.killer_passport_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.comname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.arguments_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.arguments_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Dragon::~Dragon() {
  // @@protoc_insertion_point(destructor:serialization.Dragon)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Dragon::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.x_.Destroy();
  _impl_.creation_date_.Destroy();
  _impl_.y_.Destroy();
  _impl_.killer_name_.Destroy();
  _impl_.killer_birthday_.Destroy();
  _impl_.killer_height_.Destroy();
  _impl_.killer_weight_.Destroy();
  _impl_.killer_passport_id_.Destroy();
  _impl_.comname_.Destroy();
  _impl_.arguments_.Destroy();
}

void Dragon::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Dragon::Clear() {
// @@protoc_insertion_point(message_clear_start:serialization.Dragon)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.x_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.creation_date_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.y_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.killer_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.killer_birthday_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.killer_height_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.killer_weight_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.killer_passport_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.comname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.arguments_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000f800u) {
    ::memset(&_impl_.id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.age_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.age_));
    _impl_.character_ = 1;
    _impl_.color_ = 1;
    _impl_.type_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Dragon::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "serialization.Dragon.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_x();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "serialization.Dragon.x");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 age = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_age(&has_bits);
          _impl_.age_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .serialization.Dragon.Color color = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::serialization::Dragon_Color_IsValid(val))) {
            _internal_set_color(static_cast<::serialization::Dragon_Color>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .serialization.Dragon.DragonType type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::serialization::Dragon_DragonType_IsValid(val))) {
            _internal_set_type(static_cast<::serialization::Dragon_DragonType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .serialization.Dragon.DragonCharacter character = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::serialization::Dragon_DragonCharacter_IsValid(val))) {
            _internal_set_character(static_cast<::serialization::Dragon_DragonCharacter>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string creation_date = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_creation_date();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "serialization.Dragon.creation_date");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string y = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_y();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "serialization.Dragon.y");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string killer_name = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_killer_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "serialization.Dragon.killer_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string killer_birthday = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_killer_birthday();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "serialization.Dragon.killer_birthday");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string killer_height = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_killer_height();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "serialization.Dragon.killer_height");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string killer_weight = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_killer_weight();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "serialization.Dragon.killer_weight");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string killer_passport_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_killer_passport_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "serialization.Dragon.killer_passport_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string comname = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_comname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "serialization.Dragon.comname");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string arguments = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_arguments();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "serialization.Dragon.arguments");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Dragon::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serialization.Dragon)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "serialization.Dragon.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional string x = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_x().data(), static_cast<int>(this->_internal_x().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "serialization.Dragon.x");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_x(), target);
  }

  // optional int32 age = 4;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_age(), target);
  }

  // optional .serialization.Dragon.Color color = 5;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_color(), target);
  }

  // optional .serialization.Dragon.DragonType type = 6;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_type(), target);
  }

  // optional .serialization.Dragon.DragonCharacter character = 7;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_character(), target);
  }

  // optional string creation_date = 8;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_creation_date().data(), static_cast<int>(this->_internal_creation_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "serialization.Dragon.creation_date");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_creation_date(), target);
  }

  // optional string y = 11;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_y().data(), static_cast<int>(this->_internal_y().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "serialization.Dragon.y");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_y(), target);
  }

  // optional string killer_name = 12;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_killer_name().data(), static_cast<int>(this->_internal_killer_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "serialization.Dragon.killer_name");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_killer_name(), target);
  }

  // optional string killer_birthday = 13;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_killer_birthday().data(), static_cast<int>(this->_internal_killer_birthday().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "serialization.Dragon.killer_birthday");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_killer_birthday(), target);
  }

  // optional string killer_height = 14;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_killer_height().data(), static_cast<int>(this->_internal_killer_height().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "serialization.Dragon.killer_height");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_killer_height(), target);
  }

  // optional string killer_weight = 15;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_killer_weight().data(), static_cast<int>(this->_internal_killer_weight().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "serialization.Dragon.killer_weight");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_killer_weight(), target);
  }

  // optional string killer_passport_id = 16;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_killer_passport_id().data(), static_cast<int>(this->_internal_killer_passport_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "serialization.Dragon.killer_passport_id");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_killer_passport_id(), target);
  }

  // optional string comname = 17;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_comname().data(), static_cast<int>(this->_internal_comname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "serialization.Dragon.comname");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_comname(), target);
  }

  // optional string arguments = 18;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_arguments().data(), static_cast<int>(this->_internal_arguments().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "serialization.Dragon.arguments");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_arguments(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serialization.Dragon)
  return target;
}

size_t Dragon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serialization.Dragon)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string x = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_x());
    }

    // optional string creation_date = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_creation_date());
    }

    // optional string y = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_y());
    }

    // optional string killer_name = 12;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_killer_name());
    }

    // optional string killer_birthday = 13;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_killer_birthday());
    }

    // optional string killer_height = 14;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_killer_height());
    }

    // optional string killer_weight = 15;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_killer_weight());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string killer_passport_id = 16;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_killer_passport_id());
    }

    // optional string comname = 17;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_comname());
    }

    // optional string arguments = 18;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_arguments());
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
    }

    // optional int32 age = 4;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_age());
    }

    // optional .serialization.Dragon.DragonCharacter character = 7;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_character());
    }

    // optional .serialization.Dragon.Color color = 5;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_color());
    }

    // optional .serialization.Dragon.DragonType type = 6;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Dragon::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Dragon::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Dragon::GetClassData() const { return &_class_data_; }

void Dragon::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Dragon *>(to)->MergeFrom(
      static_cast<const Dragon &>(from));
}


void Dragon::MergeFrom(const Dragon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serialization.Dragon)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_x(from._internal_x());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_creation_date(from._internal_creation_date());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_y(from._internal_y());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_killer_name(from._internal_killer_name());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_killer_birthday(from._internal_killer_birthday());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_killer_height(from._internal_killer_height());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_killer_weight(from._internal_killer_weight());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_killer_passport_id(from._internal_killer_passport_id());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_comname(from._internal_comname());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_set_arguments(from._internal_arguments());
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.age_ = from._impl_.age_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.character_ = from._impl_.character_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.color_ = from._impl_.color_;
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.type_ = from._impl_.type_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Dragon::CopyFrom(const Dragon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serialization.Dragon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dragon::IsInitialized() const {
  return true;
}

void Dragon::InternalSwap(Dragon* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.x_, lhs_arena,
      &other->_impl_.x_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.creation_date_, lhs_arena,
      &other->_impl_.creation_date_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.y_, lhs_arena,
      &other->_impl_.y_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.killer_name_, lhs_arena,
      &other->_impl_.killer_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.killer_birthday_, lhs_arena,
      &other->_impl_.killer_birthday_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.killer_height_, lhs_arena,
      &other->_impl_.killer_height_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.killer_weight_, lhs_arena,
      &other->_impl_.killer_weight_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.killer_passport_id_, lhs_arena,
      &other->_impl_.killer_passport_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.comname_, lhs_arena,
      &other->_impl_.comname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.arguments_, lhs_arena,
      &other->_impl_.arguments_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Dragon, _impl_.age_)
      + sizeof(Dragon::_impl_.age_)
      - PROTOBUF_FIELD_OFFSET(Dragon, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
  swap(_impl_.character_, other->_impl_.character_);
  swap(_impl_.color_, other->_impl_.color_);
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Dragon::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_command_2eproto_getter, &descriptor_table_command_2eproto_once,
      file_level_metadata_command_2eproto[0]);
}

// ===================================================================

class DragonCollection::_Internal {
 public:
};

DragonCollection::DragonCollection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:serialization.DragonCollection)
}
DragonCollection::DragonCollection(const DragonCollection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.dragons_){from._impl_.dragons_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:serialization.DragonCollection)
}

inline void DragonCollection::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dragons_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DragonCollection::~DragonCollection() {
  // @@protoc_insertion_point(destructor:serialization.DragonCollection)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DragonCollection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dragons_.~RepeatedPtrField();
}

void DragonCollection::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DragonCollection::Clear() {
// @@protoc_insertion_point(message_clear_start:serialization.DragonCollection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dragons_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DragonCollection::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .serialization.Dragon dragons = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dragons(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DragonCollection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serialization.DragonCollection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .serialization.Dragon dragons = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dragons_size()); i < n; i++) {
    const auto& repfield = this->_internal_dragons(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serialization.DragonCollection)
  return target;
}

size_t DragonCollection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serialization.DragonCollection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .serialization.Dragon dragons = 1;
  total_size += 1UL * this->_internal_dragons_size();
  for (const auto& msg : this->_impl_.dragons_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DragonCollection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DragonCollection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DragonCollection::GetClassData() const { return &_class_data_; }

void DragonCollection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DragonCollection *>(to)->MergeFrom(
      static_cast<const DragonCollection &>(from));
}


void DragonCollection::MergeFrom(const DragonCollection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serialization.DragonCollection)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.dragons_.MergeFrom(from._impl_.dragons_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DragonCollection::CopyFrom(const DragonCollection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serialization.DragonCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DragonCollection::IsInitialized() const {
  return true;
}

void DragonCollection::InternalSwap(DragonCollection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.dragons_.InternalSwap(&other->_impl_.dragons_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DragonCollection::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_command_2eproto_getter, &descriptor_table_command_2eproto_once,
      file_level_metadata_command_2eproto[1]);
}

// ===================================================================

class Command::_Internal {
 public:
  using HasBits = decltype(std::declval<Command>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_arguments(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::serialization::Dragon& dragon(const Command* msg);
  static void set_has_dragon(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::serialization::Dragon&
Command::_Internal::dragon(const Command* msg) {
  return *msg->_impl_.dragon_;
}
Command::Command(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:serialization.Command)
}
Command::Command(const Command& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.arguments_){}
    , decltype(_impl_.dragon_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _impl_.name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  _impl_.arguments_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.arguments_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_arguments()) {
    _impl_.arguments_.Set(from._internal_arguments(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_dragon()) {
    _impl_.dragon_ = new ::serialization::Dragon(*from._impl_.dragon_);
  }
  // @@protoc_insertion_point(copy_constructor:serialization.Command)
}

inline void Command::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.arguments_){}
    , decltype(_impl_.dragon_){nullptr}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.arguments_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.arguments_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:serialization.Command)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Command::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.arguments_.Destroy();
  if (this != internal_default_instance()) delete _impl_.dragon_;
}

void Command::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:serialization.Command)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.arguments_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.dragon_ != nullptr);
      _impl_.dragon_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "serialization.Command.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string arguments = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_arguments();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "serialization.Command.arguments");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .serialization.Dragon dragon = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_dragon(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Command::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serialization.Command)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "serialization.Command.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string arguments = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_arguments().data(), static_cast<int>(this->_internal_arguments().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "serialization.Command.arguments");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_arguments(), target);
  }

  // optional .serialization.Dragon dragon = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::dragon(this),
        _Internal::dragon(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serialization.Command)
  return target;
}

size_t Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serialization.Command)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string arguments = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_arguments());
    }

    // optional .serialization.Dragon dragon = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.dragon_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Command::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command::GetClassData() const { return &_class_data_; }

void Command::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Command *>(to)->MergeFrom(
      static_cast<const Command &>(from));
}


void Command::MergeFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serialization.Command)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_arguments(from._internal_arguments());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_dragon()->::serialization::Dragon::MergeFrom(from._internal_dragon());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serialization.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  return true;
}

void Command::InternalSwap(Command* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.arguments_, lhs_arena,
      &other->_impl_.arguments_, rhs_arena
  );
  swap(_impl_.dragon_, other->_impl_.dragon_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Command::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_command_2eproto_getter, &descriptor_table_command_2eproto_once,
      file_level_metadata_command_2eproto[2]);
}

// ===================================================================

class Response::_Internal {
 public:
  using HasBits = decltype(std::declval<Response>()._impl_._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::serialization::DragonCollection& collection(const Response* msg);
  static void set_has_collection(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::serialization::DragonCollection&
Response::_Internal::collection(const Response* msg) {
  return *msg->_impl_.collection_;
}
Response::Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:serialization.Response)
}
Response::Response(const Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.response_){}
    , decltype(_impl_.collection_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.response_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.response_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_response()) {
    _impl_.response_.Set(from._internal_response(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_collection()) {
    _impl_.collection_ = new ::serialization::DragonCollection(*from._impl_.collection_);
  }
  // @@protoc_insertion_point(copy_constructor:serialization.Response)
}

inline void Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.response_){}
    , decltype(_impl_.collection_){nullptr}
  };
  _impl_.response_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.response_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:serialization.Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.response_.Destroy();
  if (this != internal_default_instance()) delete _impl_.collection_;
}

void Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:serialization.Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.response_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.collection_ != nullptr);
      _impl_.collection_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_response();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "serialization.Response.response");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .serialization.DragonCollection collection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_collection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serialization.Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string response = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_response().data(), static_cast<int>(this->_internal_response().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "serialization.Response.response");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_response(), target);
  }

  // optional .serialization.DragonCollection collection = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::collection(this),
        _Internal::collection(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serialization.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serialization.Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string response = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_response());
    }

    // optional .serialization.DragonCollection collection = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.collection_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Response::GetClassData() const { return &_class_data_; }

void Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Response *>(to)->MergeFrom(
      static_cast<const Response &>(from));
}


void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:serialization.Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_response(from._internal_response());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_collection()->::serialization::DragonCollection::MergeFrom(from._internal_collection());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serialization.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::InternalSwap(Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.response_, lhs_arena,
      &other->_impl_.response_, rhs_arena
  );
  swap(_impl_.collection_, other->_impl_.collection_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_command_2eproto_getter, &descriptor_table_command_2eproto_once,
      file_level_metadata_command_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace serialization
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::serialization::Dragon*
Arena::CreateMaybeMessage< ::serialization::Dragon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::serialization::Dragon >(arena);
}
template<> PROTOBUF_NOINLINE ::serialization::DragonCollection*
Arena::CreateMaybeMessage< ::serialization::DragonCollection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::serialization::DragonCollection >(arena);
}
template<> PROTOBUF_NOINLINE ::serialization::Command*
Arena::CreateMaybeMessage< ::serialization::Command >(Arena* arena) {
  return Arena::CreateMessageInternal< ::serialization::Command >(arena);
}
template<> PROTOBUF_NOINLINE ::serialization::Response*
Arena::CreateMaybeMessage< ::serialization::Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::serialization::Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
